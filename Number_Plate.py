# -*- coding: utf-8 -*-
"""Number plate detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ogFQN69JULOtc0bHVHaGJZ0XQzqotx5
"""

pip install opencv-python easyocr

import cv2
import easyocr
import numpy as np
from google.colab.patches import cv2_imshow # Import cv2_imshow

def detect_number_plate(image_path):
    # Load the image
    img = cv2.imread(image_path)

    # Convert image to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # Use Haar Cascade to detect plates
    plate_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_russian_plate_number.xml')

    # Detect plates in the image
    plates = plate_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    reader = easyocr.Reader(['en'])

    # Loop through the detected plates
    for (x, y, w, h) in plates:
        # Draw rectangle around the plate
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)

        # Crop the plate from the image
        plate_img = img[y:y+h, x:x+w]

        # Use EasyOCR to read the number plate
        result = reader.readtext(plate_img)

        # Loop through results and print detected text
        for detection in result:
            text = detection[1]
            print(f"Detected Number Plate: {text}")

            # Show the image with the detected plate
            cv2.putText(img, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    # Display the image using cv2_imshow
    cv2_imshow(img) # Use cv2_imshow instead of cv2.imshow
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# Test the function
image_path = 'NUMPLATE.jpeg'  # Change to the path of your image
detect_number_plate(image_path)
